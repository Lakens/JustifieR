m2 <- rnorm(100, means[i])
psych::cohen.d(data$m1, data$m2)
m2
m1
psych::cohen.d(data$m1, data$m2)
psych::cohen.d(m1, m2)
library(psych)
?cohen.d
library(effsize)
?effsize
effsize::cohen.d(m1, m2)
d <- effsize::cohen.d(m1, m2)
ds <- c()
sds <- c()
for (i in means)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in means) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
d <- d$estimate
}
means <- rnorm(100, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in means) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$se)
ds <-c(ds,d$estimate)
}
wanrings()
warnings()
means[i]
means <- rnorm(100, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$se)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
ds
sds
means <- rnorm(100, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
psych::d2r(ds)
?d2r
psych::d2r(1)
effsize:d2r
?effsize
psych::d2r(1)
rs <- psych::d2r(ds)
cor(rs, sds)
fisherz2r(rs)
cor(fisherz2r(rs), sds)
means <- rnorm(100, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
rs <- psych::d2r(ds)
cor(rs, sds)
cor(fisherz2r(rs), sds)
means <- rnorm(1000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
rs <- psych::d2r(ds)
cor(rs, sds)
cor(fisherz2r(rs), sds)
means <- rnorm(10000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
means <- rnorm(100000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
means <- rnorm(100000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100000) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
means <- rnorm(10000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:10000) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
means <- rnorm(10000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:10000) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
cor(ds, sds)
means <- rnorm(100000, 0, 1)
library(psych)
library(effsize)
ds <- c()
sds <- c()
for (i in 1:100000) {
m1 <- rnorm(100, 0)
m2 <- rnorm(100, means[i])
d <- effsize::cohen.d(m1, m2)
dse <- d$sd
sds <- c(sds, d$sd)
ds <-c(ds,d$estimate)
}
library(pwr)
library(ggplot2)
#calculate the probability that the hypothesis is true, after a nonsignificant finding
#' @export
postdisconfirm <- function(power, alpha, prior)
{
(1-power)*prior/((1-alpha)*(1-prior))
}
#calculate the probability that the hypothesis is true, after confirming
#' @export
postconfirm <- function(power,alpha,prior)
{
(power*prior)/(alpha*(1-prior))
}
#define power function for t.test, anova and test for correlations based on pwr package
get_power   <- function(alpha, effsize, n, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4){ #get_power for different alpha levels, two tail independent samples t-test
if(test == "t-test") {
power <- pwr.t.test(n, effsize, alpha, type = type, alternative = alternative)
}
if(test == "anova") {
power <- pwr.anova.test(k, n, effsize, alpha)
}
if(test == "correlation") {
power <- pwr.r.test(n, effsize, alpha, alternative = alternative)
}
return(power$power)
}
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- (prior*power*confirm + (1-prior)*(1-alpha)*disconfirm)
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#idealalpha: Calculate the alpha level that optimizes the amount of learning
#' @export
idealalpha <- function(n, effsize, prior, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4) #return the best alpha and power as well as the correct change in believe and plot change in believe as a function of alpha
{
alpha   <- seq(0,1,.00001) #supply a vector of alphas
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) # calculate power
confirm <- postconfirm(power, alpha, prior) #posterior after confirming
disconf <- postdisconfirm(power, alpha, prior) #posterior after disconfirming
info <- information(confirm, disconf, power, alpha, prior) #expected correct change in believe
d <- as.data.frame(cbind(alpha,power,info))
maxinf <- max(na.omit(info))
dmax <- as.data.frame(subset(d, info == maxinf)) #return valus with highes correct change in believe
d05 <- as.data.frame(subset(d, alpha == 0.05)) #compare to 5% alpha
plot(alpha,info, ylab = "Expected Correct Change in Belief", xlab = "Significance Level", type = "l", main = "Optimal Alpha", xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = dmax$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(dmax$alpha, digits = 2), " Power = ", round(dmax$power, digits = 2), "Learning =", round(dmax$info*100, digits = 2), "%"))
dmax <- cbind(dmax, d05$info)
colnames(dmax) <- c("alpha", "power", "Learning", "Learning05")
return(dmax)
}
idealalpha(100, 0.3, 0.5)
idealalpha(100, 0.3, 0.9)
#calculate the probability that the hypothesis is true, after confirming
#' @export
postconfirm <- function(power,alpha,prior)
{
power/alpha
}
#calculate the probability that the hypothesis is true, after a nonsignificant finding
#' @export
postdisconfirm <- function(power, alpha, prior)
{
(1-power)/(1-alpha)
}
#define power function for t.test, anova and test for correlations based on pwr package
get_power   <- function(alpha, effsize, n, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4){ #get_power for different alpha levels, two tail independent samples t-test
if(test == "t-test") {
power <- pwr.t.test(n, effsize, alpha, type = type, alternative = alternative)
}
if(test == "anova") {
power <- pwr.anova.test(k, n, effsize, alpha)
}
if(test == "correlation") {
power <- pwr.r.test(n, effsize, alpha, alternative = alternative)
}
return(power$power)
}
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- (prior*power*confirm + (1-prior)*(1-alpha)*disconfirm)
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#idealalpha: Calculate the alpha level that optimizes the amount of learning
#' @export
idealalpha <- function(n, effsize, prior, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4) #return the best alpha and power as well as the correct change in believe and plot change in believe as a function of alpha
{
alpha   <- seq(0,1,.00001) #supply a vector of alphas
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) # calculate power
confirm <- postconfirm(power, alpha, prior) #posterior after confirming
disconf <- postdisconfirm(power, alpha, prior) #posterior after disconfirming
info <- information(confirm, disconf, power, alpha, prior) #expected correct change in believe
d <- as.data.frame(cbind(alpha,power,info))
maxinf <- max(na.omit(info))
dmax <- as.data.frame(subset(d, info == maxinf)) #return valus with highes correct change in believe
d05 <- as.data.frame(subset(d, alpha == 0.05)) #compare to 5% alpha
plot(alpha,info, ylab = "Expected Correct Change in Belief", xlab = "Significance Level", type = "l", main = "Optimal Alpha", xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = dmax$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(dmax$alpha, digits = 2), " Power = ", round(dmax$power, digits = 2), "Learning =", round(dmax$info*100, digits = 2), "%"))
dmax <- cbind(dmax, d05$info)
colnames(dmax) <- c("alpha", "power", "Learning", "Learning05")
return(dmax)
}
idealalpha(100, 0.3, 0.5)
#calculate the probability that the hypothesis is true, after confirming
#' @export
postconfirm <- function(power,alpha,prior)
{
power/alpha
}
#calculate the probability that the hypothesis is true, after a nonsignificant finding
#' @export
postdisconfirm <- function(power, alpha, prior)
{
(1-power)/(1-alpha)
}
#define power function for t.test, anova and test for correlations based on pwr package
get_power   <- function(alpha, effsize, n, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4){ #get_power for different alpha levels, two tail independent samples t-test
if(test == "t-test") {
power <- pwr.t.test(n, effsize, alpha, type = type, alternative = alternative)
}
if(test == "anova") {
power <- pwr.anova.test(k, n, effsize, alpha)
}
if(test == "correlation") {
power <- pwr.r.test(n, effsize, alpha, alternative = alternative)
}
return(power$power)
}
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- (prior*power*confirm + (1-prior)*(1-alpha)*disconfirm)
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#idealalpha: Calculate the alpha level that optimizes the amount of learning
#' @export
idealalpha <- function(n, effsize, prior, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4) #return the best alpha and power as well as the correct change in believe and plot change in believe as a function of alpha
{
alpha   <- seq(0,1,.00001) #supply a vector of alphas
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) # calculate power
confirm <- postconfirm(power, alpha, prior) #posterior after confirming
disconf <- postdisconfirm(power, alpha, prior) #posterior after disconfirming
info <- information(confirm, disconf, power, alpha, prior) #expected correct change in believe
d <- as.data.frame(cbind(alpha,power,info))
maxinf <- max(na.omit(info))
dmax <- as.data.frame(subset(d, info == maxinf)) #return valus with highes correct change in believe
d05 <- as.data.frame(subset(d, alpha == 0.05)) #compare to 5% alpha
plot(alpha,info, ylab = "Expected Correct Change in Belief", xlab = "Significance Level", type = "l", main = "Optimal Alpha", xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = dmax$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(dmax$alpha, digits = 2), " Power = ", round(dmax$power, digits = 2), "Learning =", round(dmax$info*100, digits = 2), "%"))
dmax <- cbind(dmax, d05$info)
colnames(dmax) <- c("alpha", "power", "Learning", "Learning05")
return(dmax)
}
idealalpha(100, 0.3, 0.5)
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- ((prior*power*) + (1-prior)*alpha)*confirm + ((1-prior)*(1-alpha)+prior*alpha)*disconfirm)
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- ((prior*power) + (1-prior)*alpha)*confirm + ((1-prior)*(1-alpha)+prior*alpha)*disconfirm)
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- ((prior*power) + (1-prior)*alpha)*confirm + ((1-prior)*(1-alpha)+prior*alpha)*disconfirm
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#idealalpha: Calculate the alpha level that optimizes the amount of learning
#' @export
idealalpha <- function(n, effsize, prior, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4) #return the best alpha and power as well as the correct change in believe and plot change in believe as a function of alpha
{
alpha   <- seq(0,1,.00001) #supply a vector of alphas
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) # calculate power
confirm <- postconfirm(power, alpha, prior) #posterior after confirming
disconf <- postdisconfirm(power, alpha, prior) #posterior after disconfirming
info <- information(confirm, disconf, power, alpha, prior) #expected correct change in believe
d <- as.data.frame(cbind(alpha,power,info))
maxinf <- max(na.omit(info))
dmax <- as.data.frame(subset(d, info == maxinf)) #return valus with highes correct change in believe
d05 <- as.data.frame(subset(d, alpha == 0.05)) #compare to 5% alpha
plot(alpha,info, ylab = "Expected Correct Change in Belief", xlab = "Significance Level", type = "l", main = "Optimal Alpha", xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = dmax$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(dmax$alpha, digits = 2), " Power = ", round(dmax$power, digits = 2), "Learning =", round(dmax$info*100, digits = 2), "%"))
dmax <- cbind(dmax, d05$info)
colnames(dmax) <- c("alpha", "power", "Learning", "Learning05")
return(dmax)
}
idealalpha(100, 0.5, 0.5)
idealalpha(100, 0.5, 0.5)
#'@export
#calculate the expected amount of correct change in believe
information <- function(confirm, disconfirm, power, alpha, prior) #calcualte the amount of information per test as %correct change in believe about the hypothesis
{
rightupdate <- ((prior*power) + (1-prior)*alpha)*confirm * ((1-prior)*(1-alpha)+prior*alpha)*disconfirm
information <- rightupdate #the expected correct change in belief in the hypothesis
}
#idealalpha: Calculate the alpha level that optimizes the amount of learning
#' @export
idealalpha <- function(n, effsize, prior, test = "t-test", type = "two.sample", alternative = "two.sided", k = 4) #return the best alpha and power as well as the correct change in believe and plot change in believe as a function of alpha
{
alpha   <- seq(0,1,.00001) #supply a vector of alphas
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) # calculate power
confirm <- postconfirm(power, alpha, prior) #posterior after confirming
disconf <- postdisconfirm(power, alpha, prior) #posterior after disconfirming
info <- information(confirm, disconf, power, alpha, prior) #expected correct change in believe
d <- as.data.frame(cbind(alpha,power,info))
maxinf <- max(na.omit(info))
dmax <- as.data.frame(subset(d, info == maxinf)) #return valus with highes correct change in believe
d05 <- as.data.frame(subset(d, alpha == 0.05)) #compare to 5% alpha
plot(alpha,info, ylab = "Expected Correct Change in Belief", xlab = "Significance Level", type = "l", main = "Optimal Alpha", xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = dmax$alpha, col = "blue")
axis(side=2, at=c(seq(0,(maxinf+0.01),0.01)))
axis(side=1, at=c(seq(0,1,0.05)))
mtext(side =3, paste("Alpha = ", round(dmax$alpha, digits = 2), " Power = ", round(dmax$power, digits = 2), "Learning =", round(dmax$info*100, digits = 2), "%"))
dmax <- cbind(dmax, d05$info)
colnames(dmax) <- c("alpha", "power", "Learning", "Learning05")
return(dmax)
}
idealalpha(100, 0.5, 0.5)
100^(1/3)
100^(1/4)
100^(1/10)
100^(1/6)
100^(1/7)
100^(1/6)
100^(1/6)
100^(1/5)
100^(1/6)
c <- (1:10)
100^1/c
100^(1/c)
100^(1/10)
c <- (1:10)
100^(1/c)
10000^(1/c)
bf_t.test <- function(t, n1, n2 = 0, Cauchy = T){
if (n2 == 0) {
v <- n1 -1
N <- n1
} else {
N <- n1*n2/(n1+n2)
v <- n1 + n2 -2
}
if (Cauchy == F) {
ml1 <- 1/sqrt(1+N)*(1+t^2/((1+N)*v))^(-(v+1)/2)
ml0 <- (1+t^2/v)^(-(v+1)/2)
return(ml1/ml0)
} else {
return(exp(BayesFactor::ttest.tstat(t, n1, n2)$bf))
}
}
bf_t.test(4, 20, 20)
alpha_t.test_solve <- function(x, n1, n2, evidence, Cauchy){
(evidence - bf_t.test(x, n1, n2, Cauchy))^2
}
t.testAlpha <- function(evidence, n1, n2 = 0, Cauchy = T) {
if (n2 != 0){
df = n1 + n2 -2
}
else  {
df = n1 -1
}
crit_t <- optim(1.96, alpha_t.test_solve, lower = 0, upper = Inf, method = "L-BFGS-B",
n1 = n1, n2 = n2, evidence = evidence, Cauchy = Cauchy)$par
alpha <- (1 - pt(crit_t, df))*2
return(alpha)
}
t.testAlpha(1, 100)
res5 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 0.15, n = 150, sig.level = x, type = 'one.sample', alternative = 'two.sided')$power", error = "balance", costT1T2 = 1, priorH1H0 = 0.1)
res5$alpha
res5$beta
if(!require(justifieR)){devtools::install_github("Lakens/justifieR")}
library(justifieR)
library(ggplot2)
library(pwr)
library(papaja)
res5 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 0.15, n = 150, sig.level = x, type = 'one.sample', alternative = 'two.sided')$power", error = "balance", costT1T2 = 1, priorH1H0 = 0.1)
res5$alpha
res5$beta
devtools::build()
setwd("C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/R")
devtools::build()
devtools::build()
devtools::build()
